/*
 * Created on 16 janv. 2018 ( Time 22:12:14 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.dialogflow.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.dialogflow.bean.ReferenceType;
import com.dialogflow.bean.jpa.ReferenceTypeEntity;
import java.util.List;
import com.dialogflow.business.service.mapping.ReferenceTypeServiceMapper;
import com.dialogflow.data.repository.jpa.ReferenceTypeJpaRepository;
import com.dialogflow.test.ReferenceTypeFactoryForTest;
import com.dialogflow.test.ReferenceTypeEntityFactoryForTest;
import com.dialogflow.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ReferenceTypeService
 */
@RunWith(MockitoJUnitRunner.class)
public class ReferenceTypeServiceImplTest {

	@InjectMocks
	private ReferenceTypeServiceImpl referenceTypeService;
	@Mock
	private ReferenceTypeJpaRepository referenceTypeJpaRepository;
	@Mock
	private ReferenceTypeServiceMapper referenceTypeServiceMapper;
	
	private ReferenceTypeFactoryForTest referenceTypeFactoryForTest = new ReferenceTypeFactoryForTest();

	private ReferenceTypeEntityFactoryForTest referenceTypeEntityFactoryForTest = new ReferenceTypeEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		ReferenceTypeEntity referenceTypeEntity = referenceTypeJpaRepository.findOne(id);
		
		ReferenceType referenceType = referenceTypeFactoryForTest.newReferenceType();
		when(referenceTypeServiceMapper.mapReferenceTypeEntityToReferenceType(referenceTypeEntity)).thenReturn(referenceType);

		// When
		ReferenceType referenceTypeFound = referenceTypeService.findById(id);

		// Then
		assertEquals(referenceType.getId(),referenceTypeFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ReferenceTypeEntity> referenceTypeEntitys = new ArrayList<ReferenceTypeEntity>();
		ReferenceTypeEntity referenceTypeEntity1 = referenceTypeEntityFactoryForTest.newReferenceTypeEntity();
		referenceTypeEntitys.add(referenceTypeEntity1);
		ReferenceTypeEntity referenceTypeEntity2 = referenceTypeEntityFactoryForTest.newReferenceTypeEntity();
		referenceTypeEntitys.add(referenceTypeEntity2);
		when(referenceTypeJpaRepository.findAll()).thenReturn(referenceTypeEntitys);
		
		ReferenceType referenceType1 = referenceTypeFactoryForTest.newReferenceType();
		when(referenceTypeServiceMapper.mapReferenceTypeEntityToReferenceType(referenceTypeEntity1)).thenReturn(referenceType1);
		ReferenceType referenceType2 = referenceTypeFactoryForTest.newReferenceType();
		when(referenceTypeServiceMapper.mapReferenceTypeEntityToReferenceType(referenceTypeEntity2)).thenReturn(referenceType2);

		// When
		List<ReferenceType> referenceTypesFounds = referenceTypeService.findAll();

		// Then
		assertTrue(referenceType1 == referenceTypesFounds.get(0));
		assertTrue(referenceType2 == referenceTypesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		ReferenceType referenceType = referenceTypeFactoryForTest.newReferenceType();

		ReferenceTypeEntity referenceTypeEntity = referenceTypeEntityFactoryForTest.newReferenceTypeEntity();
		when(referenceTypeJpaRepository.findOne(referenceType.getId())).thenReturn(null);
		
		referenceTypeEntity = new ReferenceTypeEntity();
		referenceTypeServiceMapper.mapReferenceTypeToReferenceTypeEntity(referenceType, referenceTypeEntity);
		ReferenceTypeEntity referenceTypeEntitySaved = referenceTypeJpaRepository.save(referenceTypeEntity);
		
		ReferenceType referenceTypeSaved = referenceTypeFactoryForTest.newReferenceType();
		when(referenceTypeServiceMapper.mapReferenceTypeEntityToReferenceType(referenceTypeEntitySaved)).thenReturn(referenceTypeSaved);

		// When
		ReferenceType referenceTypeResult = referenceTypeService.create(referenceType);

		// Then
		assertTrue(referenceTypeResult == referenceTypeSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		ReferenceType referenceType = referenceTypeFactoryForTest.newReferenceType();

		ReferenceTypeEntity referenceTypeEntity = referenceTypeEntityFactoryForTest.newReferenceTypeEntity();
		when(referenceTypeJpaRepository.findOne(referenceType.getId())).thenReturn(referenceTypeEntity);

		// When
		Exception exception = null;
		try {
			referenceTypeService.create(referenceType);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		ReferenceType referenceType = referenceTypeFactoryForTest.newReferenceType();

		ReferenceTypeEntity referenceTypeEntity = referenceTypeEntityFactoryForTest.newReferenceTypeEntity();
		when(referenceTypeJpaRepository.findOne(referenceType.getId())).thenReturn(referenceTypeEntity);
		
		ReferenceTypeEntity referenceTypeEntitySaved = referenceTypeEntityFactoryForTest.newReferenceTypeEntity();
		when(referenceTypeJpaRepository.save(referenceTypeEntity)).thenReturn(referenceTypeEntitySaved);
		
		ReferenceType referenceTypeSaved = referenceTypeFactoryForTest.newReferenceType();
		when(referenceTypeServiceMapper.mapReferenceTypeEntityToReferenceType(referenceTypeEntitySaved)).thenReturn(referenceTypeSaved);

		// When
		ReferenceType referenceTypeResult = referenceTypeService.update(referenceType);

		// Then
		verify(referenceTypeServiceMapper).mapReferenceTypeToReferenceTypeEntity(referenceType, referenceTypeEntity);
		assertTrue(referenceTypeResult == referenceTypeSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		referenceTypeService.delete(id);

		// Then
		verify(referenceTypeJpaRepository).delete(id);
		
	}

}
