/*
 * Created on 16 janv. 2018 ( Time 22:12:13 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.dialogflow.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.dialogflow.bean.DossierCredit;
import com.dialogflow.bean.jpa.DossierCreditEntity;
import java.util.Date;
import com.dialogflow.business.service.mapping.DossierCreditServiceMapper;
import com.dialogflow.data.repository.jpa.DossierCreditJpaRepository;
import com.dialogflow.test.DossierCreditFactoryForTest;
import com.dialogflow.test.DossierCreditEntityFactoryForTest;
import com.dialogflow.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of DossierCreditService
 */
@RunWith(MockitoJUnitRunner.class)
public class DossierCreditServiceImplTest {

	@InjectMocks
	private DossierCreditServiceImpl dossierCreditService;
	@Mock
	private DossierCreditJpaRepository dossierCreditJpaRepository;
	@Mock
	private DossierCreditServiceMapper dossierCreditServiceMapper;
	
	private DossierCreditFactoryForTest dossierCreditFactoryForTest = new DossierCreditFactoryForTest();

	private DossierCreditEntityFactoryForTest dossierCreditEntityFactoryForTest = new DossierCreditEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		DossierCreditEntity dossierCreditEntity = dossierCreditJpaRepository.findOne(id);
		
		DossierCredit dossierCredit = dossierCreditFactoryForTest.newDossierCredit();
		when(dossierCreditServiceMapper.mapDossierCreditEntityToDossierCredit(dossierCreditEntity)).thenReturn(dossierCredit);

		// When
		DossierCredit dossierCreditFound = dossierCreditService.findById(id);

		// Then
		assertEquals(dossierCredit.getId(),dossierCreditFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<DossierCreditEntity> dossierCreditEntitys = new ArrayList<DossierCreditEntity>();
		DossierCreditEntity dossierCreditEntity1 = dossierCreditEntityFactoryForTest.newDossierCreditEntity();
		dossierCreditEntitys.add(dossierCreditEntity1);
		DossierCreditEntity dossierCreditEntity2 = dossierCreditEntityFactoryForTest.newDossierCreditEntity();
		dossierCreditEntitys.add(dossierCreditEntity2);
		when(dossierCreditJpaRepository.findAll()).thenReturn(dossierCreditEntitys);
		
		DossierCredit dossierCredit1 = dossierCreditFactoryForTest.newDossierCredit();
		when(dossierCreditServiceMapper.mapDossierCreditEntityToDossierCredit(dossierCreditEntity1)).thenReturn(dossierCredit1);
		DossierCredit dossierCredit2 = dossierCreditFactoryForTest.newDossierCredit();
		when(dossierCreditServiceMapper.mapDossierCreditEntityToDossierCredit(dossierCreditEntity2)).thenReturn(dossierCredit2);

		// When
		List<DossierCredit> dossierCreditsFounds = dossierCreditService.findAll();

		// Then
		assertTrue(dossierCredit1 == dossierCreditsFounds.get(0));
		assertTrue(dossierCredit2 == dossierCreditsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		DossierCredit dossierCredit = dossierCreditFactoryForTest.newDossierCredit();

		DossierCreditEntity dossierCreditEntity = dossierCreditEntityFactoryForTest.newDossierCreditEntity();
		when(dossierCreditJpaRepository.findOne(dossierCredit.getId())).thenReturn(null);
		
		dossierCreditEntity = new DossierCreditEntity();
		dossierCreditServiceMapper.mapDossierCreditToDossierCreditEntity(dossierCredit, dossierCreditEntity);
		DossierCreditEntity dossierCreditEntitySaved = dossierCreditJpaRepository.save(dossierCreditEntity);
		
		DossierCredit dossierCreditSaved = dossierCreditFactoryForTest.newDossierCredit();
		when(dossierCreditServiceMapper.mapDossierCreditEntityToDossierCredit(dossierCreditEntitySaved)).thenReturn(dossierCreditSaved);

		// When
		DossierCredit dossierCreditResult = dossierCreditService.create(dossierCredit);

		// Then
		assertTrue(dossierCreditResult == dossierCreditSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		DossierCredit dossierCredit = dossierCreditFactoryForTest.newDossierCredit();

		DossierCreditEntity dossierCreditEntity = dossierCreditEntityFactoryForTest.newDossierCreditEntity();
		when(dossierCreditJpaRepository.findOne(dossierCredit.getId())).thenReturn(dossierCreditEntity);

		// When
		Exception exception = null;
		try {
			dossierCreditService.create(dossierCredit);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		DossierCredit dossierCredit = dossierCreditFactoryForTest.newDossierCredit();

		DossierCreditEntity dossierCreditEntity = dossierCreditEntityFactoryForTest.newDossierCreditEntity();
		when(dossierCreditJpaRepository.findOne(dossierCredit.getId())).thenReturn(dossierCreditEntity);
		
		DossierCreditEntity dossierCreditEntitySaved = dossierCreditEntityFactoryForTest.newDossierCreditEntity();
		when(dossierCreditJpaRepository.save(dossierCreditEntity)).thenReturn(dossierCreditEntitySaved);
		
		DossierCredit dossierCreditSaved = dossierCreditFactoryForTest.newDossierCredit();
		when(dossierCreditServiceMapper.mapDossierCreditEntityToDossierCredit(dossierCreditEntitySaved)).thenReturn(dossierCreditSaved);

		// When
		DossierCredit dossierCreditResult = dossierCreditService.update(dossierCredit);

		// Then
		verify(dossierCreditServiceMapper).mapDossierCreditToDossierCreditEntity(dossierCredit, dossierCreditEntity);
		assertTrue(dossierCreditResult == dossierCreditSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		dossierCreditService.delete(id);

		// Then
		verify(dossierCreditJpaRepository).delete(id);
		
	}

}
