/*
 * Created on 16 janv. 2018 ( Time 22:12:15 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.dialogflow.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.dialogflow.bean.Tranche;
import com.dialogflow.bean.jpa.TrancheEntity;
import com.dialogflow.bean.jpa.ProjetEntity;
import com.dialogflow.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class TrancheServiceMapperTest {

	private TrancheServiceMapper trancheServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		trancheServiceMapper = new TrancheServiceMapper();
		trancheServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'TrancheEntity' to 'Tranche'
	 * @param trancheEntity
	 */
	@Test
	public void testMapTrancheEntityToTranche() {
		// Given
		TrancheEntity trancheEntity = new TrancheEntity();
		trancheEntity.setLibelle(mockValues.nextString(100));
		trancheEntity.setDescription(mockValues.nextString(200));
		trancheEntity.setTypeTranche(mockValues.nextString(100));
		trancheEntity.setDateCreation(mockValues.nextDate());
		trancheEntity.setDateMaj(mockValues.nextDate());
		trancheEntity.setProjet(new ProjetEntity());
		trancheEntity.getProjet().setId(mockValues.nextInteger());
		
		// When
		Tranche tranche = trancheServiceMapper.mapTrancheEntityToTranche(trancheEntity);
		
		// Then
		assertEquals(trancheEntity.getLibelle(), tranche.getLibelle());
		assertEquals(trancheEntity.getDescription(), tranche.getDescription());
		assertEquals(trancheEntity.getTypeTranche(), tranche.getTypeTranche());
		assertEquals(trancheEntity.getDateCreation(), tranche.getDateCreation());
		assertEquals(trancheEntity.getDateMaj(), tranche.getDateMaj());
		assertEquals(trancheEntity.getProjet().getId(), tranche.getRefProjet());
	}
	
	/**
	 * Test : Mapping from 'Tranche' to 'TrancheEntity'
	 */
	@Test
	public void testMapTrancheToTrancheEntity() {
		// Given
		Tranche tranche = new Tranche();
		tranche.setLibelle(mockValues.nextString(100));
		tranche.setDescription(mockValues.nextString(200));
		tranche.setTypeTranche(mockValues.nextString(100));
		tranche.setDateCreation(mockValues.nextDate());
		tranche.setDateMaj(mockValues.nextDate());
		tranche.setRefProjet(mockValues.nextInteger());

		TrancheEntity trancheEntity = new TrancheEntity();
		
		// When
		trancheServiceMapper.mapTrancheToTrancheEntity(tranche, trancheEntity);
		
		// Then
		assertEquals(tranche.getLibelle(), trancheEntity.getLibelle());
		assertEquals(tranche.getDescription(), trancheEntity.getDescription());
		assertEquals(tranche.getTypeTranche(), trancheEntity.getTypeTranche());
		assertEquals(tranche.getDateCreation(), trancheEntity.getDateCreation());
		assertEquals(tranche.getDateMaj(), trancheEntity.getDateMaj());
		assertEquals(tranche.getRefProjet(), trancheEntity.getProjet().getId());
	}

}