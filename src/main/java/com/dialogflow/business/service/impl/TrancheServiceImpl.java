/*
 * Created on 16 janv. 2018 ( Time 22:12:15 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.dialogflow.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.dialogflow.bean.Tranche;
import com.dialogflow.bean.jpa.TrancheEntity;
import com.dialogflow.business.service.TrancheService;
import com.dialogflow.business.service.mapping.TrancheServiceMapper;
import com.dialogflow.data.repository.jpa.TrancheJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of TrancheService
 */
@Component
@Transactional
public class TrancheServiceImpl implements TrancheService {

	@Resource
	private TrancheJpaRepository trancheJpaRepository;

	@Resource
	private TrancheServiceMapper trancheServiceMapper;
	
	@Override
	public Tranche findById(Integer id) {
		TrancheEntity trancheEntity = trancheJpaRepository.findOne(id);
		return trancheServiceMapper.mapTrancheEntityToTranche(trancheEntity);
	}

	@Override
	public List<Tranche> findAll() {
		Iterable<TrancheEntity> entities = trancheJpaRepository.findAll();
		List<Tranche> beans = new ArrayList<Tranche>();
		for(TrancheEntity trancheEntity : entities) {
			beans.add(trancheServiceMapper.mapTrancheEntityToTranche(trancheEntity));
		}
		return beans;
	}

	@Override
	public Tranche save(Tranche tranche) {
		return update(tranche) ;
	}

	@Override
	public Tranche create(Tranche tranche) {
		TrancheEntity trancheEntity = trancheJpaRepository.findOne(tranche.getId());
		if( trancheEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		trancheEntity = new TrancheEntity();
		trancheServiceMapper.mapTrancheToTrancheEntity(tranche, trancheEntity);
		TrancheEntity trancheEntitySaved = trancheJpaRepository.save(trancheEntity);
		return trancheServiceMapper.mapTrancheEntityToTranche(trancheEntitySaved);
	}

	@Override
	public Tranche update(Tranche tranche) {
		TrancheEntity trancheEntity = trancheJpaRepository.findOne(tranche.getId());
		trancheServiceMapper.mapTrancheToTrancheEntity(tranche, trancheEntity);
		TrancheEntity trancheEntitySaved = trancheJpaRepository.save(trancheEntity);
		return trancheServiceMapper.mapTrancheEntityToTranche(trancheEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		trancheJpaRepository.delete(id);
	}

	public TrancheJpaRepository getTrancheJpaRepository() {
		return trancheJpaRepository;
	}

	public void setTrancheJpaRepository(TrancheJpaRepository trancheJpaRepository) {
		this.trancheJpaRepository = trancheJpaRepository;
	}

	public TrancheServiceMapper getTrancheServiceMapper() {
		return trancheServiceMapper;
	}

	public void setTrancheServiceMapper(TrancheServiceMapper trancheServiceMapper) {
		this.trancheServiceMapper = trancheServiceMapper;
	}

}
