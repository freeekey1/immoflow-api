/*
 * Created on 16 janv. 2018 ( Time 22:12:15 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.dialogflow.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.dialogflow.bean.UtilisateurTranche;
import com.dialogflow.bean.jpa.UtilisateurTrancheEntity;
import com.dialogflow.business.service.UtilisateurTrancheService;
import com.dialogflow.business.service.mapping.UtilisateurTrancheServiceMapper;
import com.dialogflow.data.repository.jpa.UtilisateurTrancheJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of UtilisateurTrancheService
 */
@Component
@Transactional
public class UtilisateurTrancheServiceImpl implements UtilisateurTrancheService {

	@Resource
	private UtilisateurTrancheJpaRepository utilisateurTrancheJpaRepository;

	@Resource
	private UtilisateurTrancheServiceMapper utilisateurTrancheServiceMapper;
	
	@Override
	public UtilisateurTranche findById(Integer id) {
		UtilisateurTrancheEntity utilisateurTrancheEntity = utilisateurTrancheJpaRepository.findOne(id);
		return utilisateurTrancheServiceMapper.mapUtilisateurTrancheEntityToUtilisateurTranche(utilisateurTrancheEntity);
	}

	@Override
	public List<UtilisateurTranche> findAll() {
		Iterable<UtilisateurTrancheEntity> entities = utilisateurTrancheJpaRepository.findAll();
		List<UtilisateurTranche> beans = new ArrayList<UtilisateurTranche>();
		for(UtilisateurTrancheEntity utilisateurTrancheEntity : entities) {
			beans.add(utilisateurTrancheServiceMapper.mapUtilisateurTrancheEntityToUtilisateurTranche(utilisateurTrancheEntity));
		}
		return beans;
	}

	@Override
	public UtilisateurTranche save(UtilisateurTranche utilisateurTranche) {
		return update(utilisateurTranche) ;
	}

	@Override
	public UtilisateurTranche create(UtilisateurTranche utilisateurTranche) {
		UtilisateurTrancheEntity utilisateurTrancheEntity = utilisateurTrancheJpaRepository.findOne(utilisateurTranche.getId());
		if( utilisateurTrancheEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		utilisateurTrancheEntity = new UtilisateurTrancheEntity();
		utilisateurTrancheServiceMapper.mapUtilisateurTrancheToUtilisateurTrancheEntity(utilisateurTranche, utilisateurTrancheEntity);
		UtilisateurTrancheEntity utilisateurTrancheEntitySaved = utilisateurTrancheJpaRepository.save(utilisateurTrancheEntity);
		return utilisateurTrancheServiceMapper.mapUtilisateurTrancheEntityToUtilisateurTranche(utilisateurTrancheEntitySaved);
	}

	@Override
	public UtilisateurTranche update(UtilisateurTranche utilisateurTranche) {
		UtilisateurTrancheEntity utilisateurTrancheEntity = utilisateurTrancheJpaRepository.findOne(utilisateurTranche.getId());
		utilisateurTrancheServiceMapper.mapUtilisateurTrancheToUtilisateurTrancheEntity(utilisateurTranche, utilisateurTrancheEntity);
		UtilisateurTrancheEntity utilisateurTrancheEntitySaved = utilisateurTrancheJpaRepository.save(utilisateurTrancheEntity);
		return utilisateurTrancheServiceMapper.mapUtilisateurTrancheEntityToUtilisateurTranche(utilisateurTrancheEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		utilisateurTrancheJpaRepository.delete(id);
	}

	public UtilisateurTrancheJpaRepository getUtilisateurTrancheJpaRepository() {
		return utilisateurTrancheJpaRepository;
	}

	public void setUtilisateurTrancheJpaRepository(UtilisateurTrancheJpaRepository utilisateurTrancheJpaRepository) {
		this.utilisateurTrancheJpaRepository = utilisateurTrancheJpaRepository;
	}

	public UtilisateurTrancheServiceMapper getUtilisateurTrancheServiceMapper() {
		return utilisateurTrancheServiceMapper;
	}

	public void setUtilisateurTrancheServiceMapper(UtilisateurTrancheServiceMapper utilisateurTrancheServiceMapper) {
		this.utilisateurTrancheServiceMapper = utilisateurTrancheServiceMapper;
	}

}
